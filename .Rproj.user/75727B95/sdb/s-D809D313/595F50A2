{
    "collab_server" : "",
    "contents" : "require(dplyr)\nrequire (tidyr)\nrequire(lubridate)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(rgeos)\nlibrary(sp)\nlibrary(rgdal)\nlibrary(ZillowR)\nlibrary(ggmap)\nlibrary(nominatim)\n\n\n\noptions(stringsAsFactors = FALSE)\n\nsetwd(\"C:/Users/creil/Desktop/Info370/Final\")\n\ndata <- read.csv(\"data/kc_house_data.csv\")\n\n#########################Census Income Data#############################\nincome <- read.csv(\"data/ACS_15_5YR_income.csv\")\n\n#take relevant columns from income data\nincome_clean <- select(income, GEO.id2, HC01_EST_VC13, HC01_EST_VC15)\n\n#clean column names\ncolnames(income_clean) <- c(\"zipcode\", \"median_income\", \"mean_income\")\n\n#remove row 1\nincome_clean <- income_clean[-c(1),]\n\n\nfactorToNum <- function (f){\n  return(as.numeric(levels(f))[f])\n}\n\n#change the columns from factors to numeric\nincome_clean$zipcode <- as.numeric(income_clean$zipcode)\nincome_clean$mean_income <- as.numeric(income_clean$mean_income)\nincome_clean$median_income <- as.numeric(income_clean$median_income)\n\n#join data by  zipcode\njoined <- left_join(data, income_clean, by=\"zipcode\")\n\n#add more specific column names to new columns\ncolnames(joined)[22:23] <- paste(colnames(joined)[22:23], \"_by_zip\", sep=\"\")\n\n################################Census Population Data#####################################################\npopulation <- read.csv(\"data/ACS_15_5YR_population.csv\")\n\n#take relevant columns from income data\npop_clean <- select(population, GEO.id2, HD01_VD01)\n\n#clean column names\ncolnames(pop_clean) <- c(\"zipcode\", \"population_by_zip\")\n\n#remove row 1\npop_clean <- pop_clean[-c(1),]\n\n\n#change the columns from factors to numeric\npop_clean$zipcode <- as.numeric(pop_clean$zipcode)\npop_clean$population_by_zip <- as.numeric(pop_clean$population_by_zip)\n\n#join data by  zipcode\njoined <- left_join(joined, pop_clean, by=\"zipcode\")\n\n################################Census Employment Data#####################################################\nemploy <- read.csv(\"data/ACS_15_5YR_employment.csv\")\n\n#take relevant columns from income data\nemploy_clean <- select(employ, GEO.id2, HC01_EST_VC01)\n\n#clean column names\ncolnames(employ_clean) <- c(\"zipcode\", \"people_employed_by_zip\")\n\n#remove row 1\nemploy_clean <- employ_clean[-c(1),]\n\n\n#change the columns from factors to numeric\nemploy_clean$zipcode <- as.numeric(employ_clean$zipcode)\nemploy_clean$people_employed_by_zip <- as.numeric(employ_clean$people_employed_by_zip)\n\n#join data by  zipcode\njoined <- left_join(joined, employ_clean, by=\"zipcode\")\n\n################################Census Education Data#####################################################\ned <- read.csv(\"data/ACS_15_5YR_education.csv\")\n\n#take relevant columns from income data\ned_clean <- select(ed, GEO.id2, HD01_VD01, HD01_VD06, HD01_VD07)\n\n#clean column names\ncolnames(ed_clean) <- c(\"zipcode\", \"people_educated_by_zip\", \"bachelor_degrees_by_zip\", \"grad_degrees_by_zip\")\n\n#remove row 1\ned_clean <- ed_clean[-c(1),]\n\n\n#change the columns from factors to numeric\ned_clean$zipcode <- as.numeric(ed_clean$zipcode)\ned_clean$people_educated_by_zip <- as.numeric(ed_clean$people_educated_by_zip)\ned_clean$bachelor_degrees_by_zip <- as.numeric(ed_clean$bachelor_degrees_by_zip)\ned_clean$grad_degrees_by_zip <- as.numeric(ed_clean$grad_degrees_by_zip)\n\n#join data by  zipcode\njoined <- left_join(joined, ed_clean, by=\"zipcode\")\n\n\n\n################################King County Neighborhood Data################################################\n\n#read in shp file \nKC_neighborhoods <- readOGR(dsn = \"data/neighborhood\", layer=\"neighborhood\")\n\n\nGisToDf <- function(shpData, columnToJoin, newColName){\n  #copy joined and update coordinates for joined dataset\n  joined_copy <- data.frame(joined)\n  sp::coordinates(joined_copy) <- ~ long + lat\n  proj4string(joined_copy) <- CRS(\"+proj=longlat\")\n  \n  #honestly not sure what this does but it works\n  #I think it combines the coordinate data for the joined_copy and the \n  joined_copy <- spTransform(joined_copy, proj4string(shpData))\n  sp::proj4string(joined_copy) <- proj4string(shpData)\n  \n  #joins the shpdata to the joined dataset\n  joined_copy <- sp::over(joined_copy, shpData)\n  return(joined_copy)\n}\n\n\n#dataframe for neighborhood data\nnh <- GisToDf(KC_neighborhoods)\n\n#join neighborhood to joined\njoined$neighborhood <- nh$NEIGHBORHO\n\n#set NAs for neighborhood to \"No Neighborhood\"\njoined$neighborhood <- ifelse(is.na(joined$neighborhood), \n                             'No Neighborhood', joined$neighborhood)\n\n\n###############################KC Parcel Data#######################################\nparcel <- read.csv(\"data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv\")\n\ncolnames(parcel) <- tolower(colnames(parcel))\ncolnames(parcel)[22] <- \"long\"\ncolnames(parcel)[4] <- \"id\"\n\njoined$id <- as.character(joined$id)\n\n\n#join addresses by parcel number\ntemp <- left_join(joined, parcel, by=c(\"id\"))\n\njoined$address <- temp$addr_full\n\n###############################MapQuest API for address###################################\n\n\n#get remaining missing addresses by lat and long using OpenStreetMapApi\nmapquest_key <- \"\tIFSHTrCJv54chVrndkMyXb5V4qsnTG93\"\n\n#create new df with just NA addresses\naddrNA <- joined %>% filter(is.na(address)) %>% select(lat, long, address)\n\n#add index\naddrNA$index <- seq.int(nrow(addrNA))\n\n#limit to 15000 for api calls\naddrNA <- filter(addrNA, index < 14000)\n\n#addrNA$address <- reverse_geocode_coords(small$lat, small$long, key = mapquest_key) %>% select(display_name)\n\n\n#joined$address <- reverse_geocode_coords(addrNA$lat, addrNA$long, key = mapquest_key)\n###############################Zillow API Data###################################\n\n#ideas for columns: median price of comparable sales, list price, last sale price, \n\nZWSID <- \"X1-ZWz18a8v9t2x3f_1acr8\"\nset_zillow_web_service_id(ZWSID)\n\n\n\n\n##############################Airbnb data#######################################\n\n\n###############################Yelp Data#######################################\n\n",
    "created" : 1541018949162.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1277120450",
    "id" : "595F50A2",
    "lastKnownWriteTime" : 1541037267,
    "last_content_update" : 1541037267916,
    "path" : "C:/Users/creil/Desktop/Info370/Final/wranglescript.R",
    "project_path" : "wranglescript.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}