parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
View(parcel)
colnames(parcel$PIN) <- "id"
colnames(parcel[4]) <- "id"
View(parcel)
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel)[4] <- "id"
joined <- left_join(joined, parcel, by="id")
parcel$id <- as.numeric(parcel$id)
joined <- left_join(joined, parcel, by="id")
View(joined)
View(parcel)
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel)[4] <- "id"
parcel$id <- as.numeric(parcel$id)
joined <- left_join(joined, parcel, by="id")
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel)[4] <- "id"
filter(parcel, id="7129300520")
filter(parcel, id=="7129300520")
x <- filter(parcel, id=="7129300520")
View(x)
joined$id <- as.character(joined$id)
partial_join <- function(x, y, by_x, pattern_y) {
idx_x <- sapply(y[[pattern_y]], grep, x[[by_x]])
idx_y <- sapply(seq_along(idx_x), function(i) rep(i, length(idx_x[[i]])))
df <- dplyr::bind_cols(x[unlist(idx_x), , drop = F],
y[unlist(idx_y), , drop = F])
return(df)
}
new_df <- partial_join(joined, parcel, by_x = "id", pattern_y = "id")
colnames(parcel) <- tolower(colnames(parcel))
joined <- left_join(joined, parcel, by=c("lat", "long"))
colnames(parcel)[22] <- "long"
joined <- left_join(joined, parcel, by=c("lat", "long"))
View(nh)
View(parcel)
View(joined)
require(dplyr)
require (tidyr)
require(lubridate)
library(httr)
library(jsonlite)
library(rgeos)
library(sp)
library(rgdal)
library(ZillowR)
library(ggmap)
library(nominatim)
options(stringsAsFactors = FALSE)
setwd("C:/Users/creil/Desktop/Info370/Final")
data <- read.csv("data/kc_house_data.csv")
income <- read.csv("data/ACS_16_5YR_S1901_with_ann.csv")
#########################Census Income Data#############################
#take relevant columns from income data
income_clean <- select(income, GEO.id2, HC01_EST_VC13, HC01_EST_VC15)
#clean column names
colnames(income_clean) <- c("zipcode", "median_income", "mean_income")
#remove row 1
income_clean <- income_clean[-c(1),]
factorToNum <- function (f){
return(as.numeric(levels(f))[f])
}
#change the columns from factors to numeric
income_clean$zipcode <- as.numeric(income_clean$zipcode)
income_clean$mean_income <- as.numeric(income_clean$mean_income)
income_clean$median_income <- as.numeric(income_clean$median_income)
#join data by  zipcode
joined <- left_join(data, income_clean, by="zipcode")
#add more specific column names to new columns
colnames(joined)[22:23] <- paste(colnames(joined)[22:23], "_by_zip", sep="")
################################King County Neighborhood Data################################################
#read in shp file
KC_neighborhoods <- readOGR(dsn = "data/neighborhood", layer="neighborhood")
GisToDf <- function(shpData, columnToJoin, newColName){
#copy joined and update coordinates for joined dataset
joined_copy <- data.frame(joined)
sp::coordinates(joined_copy) <- ~ long + lat
proj4string(joined_copy) <- CRS("+proj=longlat")
#honestly not sure what this does but it works
#I think it combines the coordinate data for the joined_copy and the
joined_copy <- spTransform(joined_copy, proj4string(shpData))
sp::proj4string(joined_copy) <- proj4string(shpData)
#joins the shpdata to the joined dataset
joined_copy <- sp::over(joined_copy, shpData)
return(joined_copy)
}
#dataframe for neighborhood data
nh <- GisToDf(KC_neighborhoods)
#join neighborhood to joined
joined$neighborhood <- nh$NEIGHBORHO
#set NAs for neighborhood to "No Neighborhood"
joined$neighborhood <- ifelse(is.na(joined$neighborhood),
'No Neighborhood', joined$neighborhood)
###############################KC Parcel Data#######################################
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
joined$id <- as.character(joined$id)
#join addresses by parcel number
joined <- left_join(joined, select(parcel, long, lat, addr_full), by=c("lat", "long"))
joined <- left_join(joined, select(parcel, long, lat, addr_full), by=c("lat" = "lat", "long" = "long"))
joined <- left_join(joined, select(parcel, id, addr_full), by=c("id" = "id"))
joined <- left_join(joined, select(parcel, addr_full, id), by=c("id"))
joined <- left_join(joined, select(parcel, addr_full, id), by=c("id" ="id"))
colnames(joined)
joined %>% left_join(select(parcel, addr_full, id), by=id)
require(dplyr)
require (tidyr)
require(lubridate)
library(httr)
library(jsonlite)
library(rgeos)
library(sp)
library(rgdal)
library(ZillowR)
library(ggmap)
library(nominatim)
options(stringsAsFactors = FALSE)
setwd("C:/Users/creil/Desktop/Info370/Final")
data <- read.csv("data/kc_house_data.csv")
income <- read.csv("data/ACS_16_5YR_S1901_with_ann.csv")
#########################Census Income Data#############################
#take relevant columns from income data
income_clean <- select(income, GEO.id2, HC01_EST_VC13, HC01_EST_VC15)
#clean column names
colnames(income_clean) <- c("zipcode", "median_income", "mean_income")
#remove row 1
income_clean <- income_clean[-c(1),]
factorToNum <- function (f){
return(as.numeric(levels(f))[f])
}
#change the columns from factors to numeric
income_clean$zipcode <- as.numeric(income_clean$zipcode)
income_clean$mean_income <- as.numeric(income_clean$mean_income)
income_clean$median_income <- as.numeric(income_clean$median_income)
#join data by  zipcode
joined <- left_join(data, income_clean, by="zipcode")
#add more specific column names to new columns
colnames(joined)[22:23] <- paste(colnames(joined)[22:23], "_by_zip", sep="")
################################King County Neighborhood Data################################################
#read in shp file
KC_neighborhoods <- readOGR(dsn = "data/neighborhood", layer="neighborhood")
GisToDf <- function(shpData, columnToJoin, newColName){
#copy joined and update coordinates for joined dataset
joined_copy <- data.frame(joined)
sp::coordinates(joined_copy) <- ~ long + lat
proj4string(joined_copy) <- CRS("+proj=longlat")
#honestly not sure what this does but it works
#I think it combines the coordinate data for the joined_copy and the
joined_copy <- spTransform(joined_copy, proj4string(shpData))
sp::proj4string(joined_copy) <- proj4string(shpData)
#joins the shpdata to the joined dataset
joined_copy <- sp::over(joined_copy, shpData)
return(joined_copy)
}
#dataframe for neighborhood data
nh <- GisToDf(KC_neighborhoods)
#join neighborhood to joined
joined$neighborhood <- nh$NEIGHBORHO
#set NAs for neighborhood to "No Neighborhood"
joined$neighborhood <- ifelse(is.na(joined$neighborhood),
'No Neighborhood', joined$neighborhood)
###############################KC Parcel Data#######################################
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
joined$id <- as.character(joined$id)
#join addresses by parcel number
joined %>% left_join(select(parcel, addr_full, id), by=id)
colnames(joined)
require(dplyr)
require (tidyr)
require(lubridate)
library(httr)
library(jsonlite)
library(rgeos)
library(sp)
library(rgdal)
library(ZillowR)
library(ggmap)
library(nominatim)
options(stringsAsFactors = FALSE)
setwd("C:/Users/creil/Desktop/Info370/Final")
data <- read.csv("data/kc_house_data.csv")
income <- read.csv("data/ACS_16_5YR_S1901_with_ann.csv")
#########################Census Income Data#############################
#take relevant columns from income data
income_clean <- select(income, GEO.id2, HC01_EST_VC13, HC01_EST_VC15)
#clean column names
colnames(income_clean) <- c("zipcode", "median_income", "mean_income")
#remove row 1
income_clean <- income_clean[-c(1),]
factorToNum <- function (f){
return(as.numeric(levels(f))[f])
}
#change the columns from factors to numeric
income_clean$zipcode <- as.numeric(income_clean$zipcode)
income_clean$mean_income <- as.numeric(income_clean$mean_income)
income_clean$median_income <- as.numeric(income_clean$median_income)
#join data by  zipcode
joined <- left_join(data, income_clean, by="zipcode")
#add more specific column names to new columns
colnames(joined)[22:23] <- paste(colnames(joined)[22:23], "_by_zip", sep="")
################################King County Neighborhood Data################################################
#read in shp file
KC_neighborhoods <- readOGR(dsn = "data/neighborhood", layer="neighborhood")
GisToDf <- function(shpData, columnToJoin, newColName){
#copy joined and update coordinates for joined dataset
joined_copy <- data.frame(joined)
sp::coordinates(joined_copy) <- ~ long + lat
proj4string(joined_copy) <- CRS("+proj=longlat")
#honestly not sure what this does but it works
#I think it combines the coordinate data for the joined_copy and the
joined_copy <- spTransform(joined_copy, proj4string(shpData))
sp::proj4string(joined_copy) <- proj4string(shpData)
#joins the shpdata to the joined dataset
joined_copy <- sp::over(joined_copy, shpData)
return(joined_copy)
}
#dataframe for neighborhood data
nh <- GisToDf(KC_neighborhoods)
#join neighborhood to joined
joined$neighborhood <- nh$NEIGHBORHO
#set NAs for neighborhood to "No Neighborhood"
joined$neighborhood <- ifelse(is.na(joined$neighborhood),
'No Neighborhood', joined$neighborhood)
###############################KC Parcel Data#######################################
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
joined$id <- as.character(joined$id)
#join addresses by parcel number
joined %>% left_join(select(parcel, addr_full, id), by=id)
colnames(joined)
joined %>% left_join(select(parcel, addr_full, id), by="id")
View(parcel)
joined %>% left_join(parcel, by="id")
joined %>% left_join(parcel, by="id")
joined %>% left_join(parcel, by=c("lat", "long"))
temp <- joined %>% left_join(parcel, by=c("lat", "long"))
View(temp)
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
joined$id <- as.character(joined$id)
temp <- joined %>% left_join(parcel, by=c("lat", "long"))
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
joined$id <- as.character(joined$id)
temp <- left_join(joined, parcel, by=c("lat", "long"))
View(temp)
temp <- left_join(joined, parcel, by="id")
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
View(parcel)
temp <- left_join(joined, parcel, by=c("lat", "long"))
View(temp)
left_join(joined, parcel, by=c("lat", "long"))
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
joined$id <- as.character(joined$id)
#join addresses by parcel number
left_join(joined, parcel, by=c("lat", "long"))
require(dplyr)
require (tidyr)
require(lubridate)
library(httr)
library(jsonlite)
library(rgeos)
library(sp)
library(rgdal)
library(ZillowR)
library(ggmap)
library(nominatim)
options(stringsAsFactors = FALSE)
setwd("C:/Users/creil/Desktop/Info370/Final")
data <- read.csv("data/kc_house_data.csv")
income <- read.csv("data/ACS_16_5YR_S1901_with_ann.csv")
#########################Census Income Data#############################
#take relevant columns from income data
income_clean <- select(income, GEO.id2, HC01_EST_VC13, HC01_EST_VC15)
#clean column names
colnames(income_clean) <- c("zipcode", "median_income", "mean_income")
#remove row 1
income_clean <- income_clean[-c(1),]
factorToNum <- function (f){
return(as.numeric(levels(f))[f])
}
#change the columns from factors to numeric
income_clean$zipcode <- as.numeric(income_clean$zipcode)
income_clean$mean_income <- as.numeric(income_clean$mean_income)
income_clean$median_income <- as.numeric(income_clean$median_income)
#join data by  zipcode
joined <- left_join(data, income_clean, by="zipcode")
#add more specific column names to new columns
colnames(joined)[22:23] <- paste(colnames(joined)[22:23], "_by_zip", sep="")
################################King County Neighborhood Data################################################
#read in shp file
KC_neighborhoods <- readOGR(dsn = "data/neighborhood", layer="neighborhood")
GisToDf <- function(shpData, columnToJoin, newColName){
#copy joined and update coordinates for joined dataset
joined_copy <- data.frame(joined)
sp::coordinates(joined_copy) <- ~ long + lat
proj4string(joined_copy) <- CRS("+proj=longlat")
#honestly not sure what this does but it works
#I think it combines the coordinate data for the joined_copy and the
joined_copy <- spTransform(joined_copy, proj4string(shpData))
sp::proj4string(joined_copy) <- proj4string(shpData)
#joins the shpdata to the joined dataset
joined_copy <- sp::over(joined_copy, shpData)
return(joined_copy)
}
#dataframe for neighborhood data
nh <- GisToDf(KC_neighborhoods)
#join neighborhood to joined
joined$neighborhood <- nh$NEIGHBORHO
#set NAs for neighborhood to "No Neighborhood"
joined$neighborhood <- ifelse(is.na(joined$neighborhood),
'No Neighborhood', joined$neighborhood)
###############################KC Parcel Data#######################################
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
joined$id <- as.character(joined$id)
temp <- left_join(joined, parcel, by=c("lat", "long"))
View(temp)
temp <- left_join(joined, parcel, by="id")
temp <- left_join(joined, parcel, by=id)
temp <- left_join(joined, parcel, by=c("id")
###############################Zillow API Data###################################
#ideas for columns: median price of comparable sales, list price, last sale price,
#get addresses by lat and long
mapquest_key <- "w8a7O6pcCk25rLxnjPZrYBDIkrm6Dvc0"
joined$textAddress <- reverse_geocode_coords(joined$lat, joined$long)
colnmes
ZWSID <- "X1-ZWz18a8v9t2x3f_1acr8"
set_zillow_web_service_id(ZWSID)
temp <- left_join(joined, parcel, by=c("id"))
temp <- left_join(joined, parcel, by=c("id"))
colnames(parcel)[4] <- "id"
temp <- left_join(joined, parcel, by=c("id"))
View(temp)
joined$address <- temp$addr_full
joined$address[is.na(joined$address)] <- "a"
require(dplyr)
require (tidyr)
require(lubridate)
library(httr)
library(jsonlite)
library(rgeos)
library(sp)
library(rgdal)
library(ZillowR)
library(ggmap)
library(nominatim)
options(stringsAsFactors = FALSE)
setwd("C:/Users/creil/Desktop/Info370/Final")
data <- read.csv("data/kc_house_data.csv")
income <- read.csv("data/ACS_16_5YR_S1901_with_ann.csv")
#########################Census Income Data#############################
#take relevant columns from income data
income_clean <- select(income, GEO.id2, HC01_EST_VC13, HC01_EST_VC15)
#clean column names
colnames(income_clean) <- c("zipcode", "median_income", "mean_income")
#remove row 1
income_clean <- income_clean[-c(1),]
factorToNum <- function (f){
return(as.numeric(levels(f))[f])
}
#change the columns from factors to numeric
income_clean$zipcode <- as.numeric(income_clean$zipcode)
income_clean$mean_income <- as.numeric(income_clean$mean_income)
income_clean$median_income <- as.numeric(income_clean$median_income)
#join data by  zipcode
joined <- left_join(data, income_clean, by="zipcode")
#add more specific column names to new columns
colnames(joined)[22:23] <- paste(colnames(joined)[22:23], "_by_zip", sep="")
################################King County Neighborhood Data################################################
#read in shp file
KC_neighborhoods <- readOGR(dsn = "data/neighborhood", layer="neighborhood")
GisToDf <- function(shpData, columnToJoin, newColName){
#copy joined and update coordinates for joined dataset
joined_copy <- data.frame(joined)
sp::coordinates(joined_copy) <- ~ long + lat
proj4string(joined_copy) <- CRS("+proj=longlat")
#honestly not sure what this does but it works
#I think it combines the coordinate data for the joined_copy and the
joined_copy <- spTransform(joined_copy, proj4string(shpData))
sp::proj4string(joined_copy) <- proj4string(shpData)
#joins the shpdata to the joined dataset
joined_copy <- sp::over(joined_copy, shpData)
return(joined_copy)
}
#dataframe for neighborhood data
nh <- GisToDf(KC_neighborhoods)
#join neighborhood to joined
joined$neighborhood <- nh$NEIGHBORHO
#set NAs for neighborhood to "No Neighborhood"
joined$neighborhood <- ifelse(is.na(joined$neighborhood),
'No Neighborhood', joined$neighborhood)
###############################KC Parcel Data#######################################
parcel <- read.csv("data/Parcels_for_King_County_with_Address_with_Property_Information__parcel_address_area.csv")
colnames(parcel) <- tolower(colnames(parcel))
colnames(parcel)[22] <- "long"
colnames(parcel)[4] <- "id"
joined$id <- as.character(joined$id)
#join addresses by parcel number
temp <- left_join(joined, parcel, by=c("id"))
joined$address <- temp$addr_full
###############################MapQuest API for address###################################
#get addresses by lat and long
mapquest_key <- "w8a7O6pcCk25rLxnjPZrYBDIkrm6Dvc0"
joined$address[is.na(joined$address)] <- reverse_geocode_coords(joined$lat, joined$long)
joined$address[is.na(joined$address)] <- reverse_geocode_coords(joined$lat, joined$long, key = getOption(mapquest_key))
mapquest_key <- "w8a7O6pcCk25rLxnjPZrYBDIkrm6Dvc0"
joined$address[is.na(joined$address)] <- reverse_geocode_coords(joined$lat, joined$long, key = getOption(mapquest_key))
joined$address[is.na(joined$address)] <- reverse_geocode_coords(joined$lat, joined$long, key = getOption(mapquest_key, ""))
joined$address[is.na(joined$address)] <- reverse_geocode_coords(joined$lat, joined$long, key = mapquest_key)
joined$address[is.na(joined$address)][2] <- reverse_geocode_coords(joined$lat, joined$long, key = mapquest_key)
setwd("c:/users/creil/desktop/info370/lab 6")
setwd("c:/Users/creil/Desktop/Info370/lab 6")
setwd("c:/Users/creil/Desktop/Info370/lab6")
beav1 <- read.csv("beav1.csv")
beav1 <- read.csv("beav2.csv")
plot(beav1)
b1_plot <- plot(beav1)
b1_plot <- hist(beav1)
b1_plot <- hist(beav1)
beav1 <- read.csv("beav1.csv")
beav2 <- read.csv("beav2.csv")
View(beav1)
b1_plot <- hist(beav1$temp)
b1_plot <- hist(beav1$temp, breaks=100)
b2_plot <- hist(beav2$temp, breaks=20)
b1_plot <- hist(beav1$temp, breaks=20)
beav1 <- read.csv("beav1.csv")
beav2 <- read.csv("beav2.csv")
b1_plot <- hist(beav1$temp, breaks=20)
b2_plot <- hist(beav2$temp, breaks=20)
hist(beav1$temp, breaks=20)
hist(beav1$temp, breaks=100)
hist(beav1$temp, breaks=100)
setwd("c:/Users/creil/Desktop/Info370/lab6")
beav1 <- read.csv("beav1.csv")
beav2 <- read.csv("beav2.csv")
hist(beav1$temp, breaks=100)
hist(beav1$temp)
hist(beav1$temp)
b2_plot <- hist(beav2$temp, breaks=20)
View(hist(beav1$temp))
b1_plot <- hist(beav1$temp)
b1_plot <- hist(beav1$temp, breaks=20)
b2_plot <- hist(beav2$temp, breaks=20)
plot(b2_plot)
View(beav1)
View(beav2)
b1_plot <- hist(beav1$temp, breaks=20)
b2_plot <- hist(beav2$temp, breaks=20)
t.test(b1$temp, b2$temp)
t.test(beav1$temp, beav2$temp)
b1_plot <- hist(beav1$temp, breaks=20)
b2_plot <- hist(beav2$temp, breaks=20)
MMprop <- {.13, .20, .14, .16, .24, .23}
MMColor <- {"red", "orange", "yellow", "green", "blue", "brown"}
MMActual <- {108, 133, 103, 139, 133, 96}
MMprop <- c{.13, .20, .14, .16, .24, .23}
MMColor <- c{"red", "orange", "yellow", "green", "blue", "brown"}
MMActual <- c{108, 133, 103, 139, 133, 96}
MMprop <- c(.13, .20, .14, .16, .24, .23)
MMColor <- c("red", "orange", "yellow", "green", "blue", "brown")
MMActual <- c(108, 133, 103, 139, 133, 96)
require(ggplot2)
dat <- data.frame(MMCOlor, MMActual, MMprop)
MMprop <- c(.13, .20, .14, .16, .24, .23)
MMColor <- c("red", "orange", "yellow", "green", "blue", "brown")
MMActual <- c(108, 133, 103, 139, 133, 96)
dat <- data.frame(MMCOlor, MMActual, MMprop)
dat <- data.frame(MMColor, MMActual, MMprop)
bar<-ggplot(data=dat, aes(x=MMColor, y=MMActual)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
bar
View(bar)
b1_plot
hist1 <- ggplot(beav1, aes(beav1$temp))
hist1 + geom_histogram(bins=15)+labs(x='body', y='freq')
hist1
hist1
chisq.test(table(dat), p=MMprop, correct=FALSE))
chisq.test(table(dat), p=MMprop, correct=FALSE)
mapquest_key <- "gduscg7Mwm1Et2dCCxtdMnv5K4KmRQ5Z"
joined$address[is.na(joined$address)][2] <- reverse_geocode_coords(joined$lat, joined$long, key = mapquest_key)
sum(is.na(joined$address))
joined$index <- seq.int(nrow(joined))
joined$address[is.na(joined$address)] <- ifelse(joined$index < 10, reverse_geocode_coords(joined$lat, joined$long, key = mapquest_key), joined$address)
mapquest_key <- "	IFSHTrCJv54chVrndkMyXb5V4qsnTG93"
joined$address[is.na(joined$address)] <- ifelse(joined$index < 10, reverse_geocode_coords(joined$lat, joined$long, key = mapquest_key), joined$address)
lat <- select(joined$lat) %>% filter(index < 10)
lat <- select(joined, lat) %>% filter(index < 10)
lat <- select(joined, lat) %>% filter(index < 10)
lat <- joined %>% select(lat) %>% filter(index < 10)
lat <- joined %>% filter(index < 10) %>% select(lat)
View(lat)
small <- joined %>% filter(index < 10) %>% select(lat, long, address)
small <- joined %>% filter(index < 10) %>% select(lat, long, address)
View(small)
View(data)
View(small)
View(beav1)
